// Copyright 2012 Citrix Systems, Inc. Licensed under the
// Apache License, Version 2.0 (the "License"); you may not use this
// file except in compliance with the License.  Citrix Systems, Inc.
// reserves all rights not expressly granted by the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.network.guru;

import javax.ejb.Local;

import org.apache.log4j.Logger;

import com.cloud.configuration.Config;
import com.cloud.dc.DataCenter;
import com.cloud.deploy.DeployDestination;
import com.cloud.deploy.DeploymentPlan;
import com.cloud.event.EventTypes;
import com.cloud.event.EventUtils;
import com.cloud.event.EventVO;
import com.cloud.exception.InsufficientAddressCapacityException;
import com.cloud.exception.InsufficientVirtualNetworkCapcityException;
import com.cloud.network.Network;
import com.cloud.network.NetworkManager;
import com.cloud.network.NetworkVO;
import com.cloud.network.ovs.OvsTunnelManager;
import com.cloud.offering.NetworkOffering;
import com.cloud.user.Account;
import com.cloud.user.UserContext;
import com.cloud.utils.component.Inject;
import com.cloud.vm.Nic.ReservationStrategy;
import com.cloud.vm.NicProfile;
import com.cloud.vm.ReservationContext;
import com.cloud.vm.VirtualMachine;
import com.cloud.vm.VirtualMachineProfile;
import com.cloud.network.Networks.BroadcastDomainType;
import com.cloud.network.Network.State;

@Local(value=NetworkGuru.class)
public class QuantumGuestNetworkGuru extends GuestNetworkGuru {
	private static final Logger s_logger = Logger.getLogger(QuantumGuestNetworkGuru.class);
	
	boolean useQuantum = false;
	
	@Override
    public Network design(NetworkOffering offering, DeploymentPlan plan, Network userSpecified, Account owner) {
      
		useQuantum = Boolean.parseBoolean(_configDao.getValue(Config.Quantum.key()));
		if (!useQuantum) {
			return null;
		}
		
        NetworkVO config = (NetworkVO) super.design(offering, plan, userSpecified, owner); 
        if (config == null) {
        	return null;
        }
        
        config.setBroadcastDomainType(BroadcastDomainType.Quantum);
        
        return config;
	}
	
	/***
	 * For quantum integration we need to implement the network in a different way.
	 * Cloudstack will still be setting CIDR and GW, but we will not allocate anymore a vnet.
	 * Cloudstack will also ignore the chosen physical network, as that is managed by Quantum.
	 */
	@Override
	public Network implement(Network network, NetworkOffering offering, DeployDestination dest, 
							 ReservationContext context) throws InsufficientVirtualNetworkCapcityException {
		assert (network.getState() == State.Implementing) : "Why are we implementing " + network;

        NetworkVO implemented = new NetworkVO(network.getTrafficType(), network.getMode(), 
        							network.getBroadcastDomainType(), network.getNetworkOfferingId(),
        							State.Allocated, network.getDataCenterId(), null);
        
        //TODO: And now the juicy part! Put the Quantum network uuid in the broadcast URI!
        implemented.setBroadcastUri(BroadcastDomainType.Quantum.toUri("diegoarmandomaradona"));
        EventUtils.saveEvent(UserContext.current().getCallerUserId(), network.getAccountId(),
        		EventVO.LEVEL_INFO, EventTypes.EVENT_ZONE_VLAN_ASSIGN, "Assigned Quantum Network " +
                "to CS Network" + network.getId(), 0);

        if (network.getGateway() != null) {
            implemented.setGateway(network.getGateway());
        }
        if (network.getCidr() != null) {
            implemented.setCidr(network.getCidr());
        }
        return implemented;

	}
	
}
